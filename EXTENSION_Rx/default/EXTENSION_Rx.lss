
EXTENSION_Rx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000003dc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000060  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000d5  00000000  00000000  000004f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000095c  00000000  00000000  000005cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000035b  00000000  00000000  00000f27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000076c  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  000019f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001a3  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000413  00000000  00000000  00001c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ed       	ldi	r30, 0xDC	; 220
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 3a       	cpi	r26, 0xA6	; 166
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	c6 c1       	rjmp	.+908    	; 0x3d8 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
#include<avr/io.h>
#include<util/delay.h>
#include"lcd.h"

void main()
{
  4e:	cf 92       	push	r12
  50:	df 92       	push	r13
  52:	ef 92       	push	r14
  54:	ff 92       	push	r15
  56:	0f 93       	push	r16
  58:	1f 93       	push	r17
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
    MCUCSR=0x80;;
  5e:	80 e8       	ldi	r24, 0x80	; 128
  60:	84 bf       	out	0x34, r24	; 52
	MCUCSR=0x80;
  62:	84 bf       	out	0x34, r24	; 52
	USARTInit(95);
  64:	8f e5       	ldi	r24, 0x5F	; 95
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	77 d1       	rcall	.+750    	; 0x358 <USARTInit>
	InitLCD(0);
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	dd d0       	rcall	.+442    	; 0x228 <InitLCD>
	LCDClear();
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	b1 d0       	rcall	.+354    	; 0x1da <LCDByte>
    LCDWriteString("Welcome");
  78:	80 e6       	ldi	r24, 0x60	; 96
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	fd d0       	rcall	.+506    	; 0x278 <LCDWriteString>
  7e:	80 e2       	ldi	r24, 0x20	; 32
  80:	9e e4       	ldi	r25, 0x4E	; 78
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  82:	29 e1       	ldi	r18, 0x19	; 25
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	f9 01       	movw	r30, r18
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8e:	d9 f7       	brne	.-10     	; 0x86 <main+0x38>
	_delay_ms(2000);
	LCDClear();
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	a0 d0       	rcall	.+320    	; 0x1da <LCDByte>
	LCDWriteString("Ready To Receiver");
  9a:	88 e6       	ldi	r24, 0x68	; 104
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	ec d0       	rcall	.+472    	; 0x278 <LCDWriteString>
  a0:	80 e2       	ldi	r24, 0x20	; 32
  a2:	9e e4       	ldi	r25, 0x4E	; 78
  a4:	29 e1       	ldi	r18, 0x19	; 25
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b0:	d9 f7       	brne	.-10     	; 0xa8 <main+0x5a>
	_delay_ms(2000);
	LCDClear();
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	8f d0       	rcall	.+286    	; 0x1da <LCDByte>
	char data;
	DDRB=0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
	data= USARTReadChar();
	if(data=='a')
	   {
	    LCDClear();
		LCDWriteStringXY(0,0,"Main ON");
		PORTB=0b00000001;
  c0:	cc 24       	eor	r12, r12
  c2:	c3 94       	inc	r12
  c4:	c4 ec       	ldi	r28, 0xC4	; 196
  c6:	d9 e0       	ldi	r29, 0x09	; 9
    	}
	else if (data=='d')
	   {
	    LCDClear();
		LCDWriteStringXY(0,0,"PORT 3 ON");
	    PORTB=0b00001000;
  c8:	09 e1       	ldi	r16, 0x19	; 25
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	28 e0       	ldi	r18, 0x08	; 8
  ce:	d2 2e       	mov	r13, r18
    	}
	else if(data=='c')
	   {
	    LCDClear();
		LCDWriteStringXY(0,0,"PORT 2 ON");
	    PORTB=0b00000100;
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	e9 2e       	mov	r14, r25
    	}
	else if(data=='b')
	   {
	    LCDClear();
		LCDWriteStringXY(0,0,"PORT 1 ON");
		PORTB=0b00000010;
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	f8 2e       	mov	r15, r24
	LCDClear();
	char data;
	DDRB=0xFF;
	while(1)
	{
	data= USARTReadChar();
  d8:	46 d1       	rcall	.+652    	; 0x366 <USARTReadChar>
	if(data=='a')
  da:	81 36       	cpi	r24, 0x61	; 97
  dc:	69 f4       	brne	.+26     	; 0xf8 <main+0xaa>
	   {
	    LCDClear();
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	79 d0       	rcall	.+242    	; 0x1da <LCDByte>
		LCDWriteStringXY(0,0,"Main ON");
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	2d d1       	rcall	.+602    	; 0x348 <LCDGotoXY>
  ee:	8a e7       	ldi	r24, 0x7A	; 122
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	c2 d0       	rcall	.+388    	; 0x278 <LCDWriteString>
		PORTB=0b00000001;
  f4:	c8 ba       	out	0x18, r12	; 24
  f6:	2c c0       	rjmp	.+88     	; 0x150 <main+0x102>
		_delay_ms(10);
    	}
	else if(data=='b')
  f8:	82 36       	cpi	r24, 0x62	; 98
  fa:	69 f4       	brne	.+26     	; 0x116 <main+0xc8>
	   {
	    LCDClear();
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	6a d0       	rcall	.+212    	; 0x1da <LCDByte>
		LCDWriteStringXY(0,0,"PORT 1 ON");
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	1e d1       	rcall	.+572    	; 0x348 <LCDGotoXY>
 10c:	82 e8       	ldi	r24, 0x82	; 130
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	b3 d0       	rcall	.+358    	; 0x278 <LCDWriteString>
		PORTB=0b00000010;
 112:	f8 ba       	out	0x18, r15	; 24
 114:	1d c0       	rjmp	.+58     	; 0x150 <main+0x102>
		_delay_ms(10);
    	}
	else if(data=='c')
 116:	83 36       	cpi	r24, 0x63	; 99
 118:	69 f4       	brne	.+26     	; 0x134 <main+0xe6>
	   {
	    LCDClear();
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	5b d0       	rcall	.+182    	; 0x1da <LCDByte>
		LCDWriteStringXY(0,0,"PORT 2 ON");
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	0f d1       	rcall	.+542    	; 0x348 <LCDGotoXY>
 12a:	8c e8       	ldi	r24, 0x8C	; 140
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	a4 d0       	rcall	.+328    	; 0x278 <LCDWriteString>
	    PORTB=0b00000100;
 130:	e8 ba       	out	0x18, r14	; 24
 132:	0e c0       	rjmp	.+28     	; 0x150 <main+0x102>
		_delay_ms(10);
    	}
	else if (data=='d')
 134:	84 36       	cpi	r24, 0x64	; 100
 136:	81 f4       	brne	.+32     	; 0x158 <main+0x10a>
	   {
	    LCDClear();
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	4c d0       	rcall	.+152    	; 0x1da <LCDByte>
		LCDWriteStringXY(0,0,"PORT 3 ON");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	00 d1       	rcall	.+512    	; 0x348 <LCDGotoXY>
 148:	86 e9       	ldi	r24, 0x96	; 150
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	95 d0       	rcall	.+298    	; 0x278 <LCDWriteString>
	    PORTB=0b00001000;
 14e:	d8 ba       	out	0x18, r13	; 24
 150:	ce 01       	movw	r24, r28
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x104>
 156:	c0 cf       	rjmp	.-128    	; 0xd8 <main+0x8a>
    	_delay_ms(10);
    	}
	else if (data=='e')
 158:	85 36       	cpi	r24, 0x65	; 101
 15a:	09 f0       	breq	.+2      	; 0x15e <main+0x110>
 15c:	bd cf       	rjmp	.-134    	; 0xd8 <main+0x8a>
	   {
	    LCDClear();
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	39 d0       	rcall	.+114    	; 0x1da <LCDByte>
		LCDWriteStringXY(0,0,"STOP");
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	ed d0       	rcall	.+474    	; 0x348 <LCDGotoXY>
 16e:	80 ea       	ldi	r24, 0xA0	; 160
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	82 d0       	rcall	.+260    	; 0x278 <LCDWriteString>
	    PORTB=0b00000000;
 174:	18 ba       	out	0x18, r1	; 24
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	97 e2       	ldi	r25, 0x27	; 39
 17a:	f8 01       	movw	r30, r16
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x12e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 180:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 182:	d9 f7       	brne	.-10     	; 0x17a <main+0x12c>
 184:	a9 cf       	rjmp	.-174    	; 0xd8 <main+0x8a>

00000186 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 186:	84 b3       	in	r24, 0x14	; 20
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 18c:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 18e:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	97 9a       	sbi	0x12, 7	; 18
 19a:	82 2f       	mov	r24, r18
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 1a0:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 1a2:	82 95       	swap	r24
 1a4:	80 7f       	andi	r24, 0xF0	; 240
 1a6:	92 2f       	mov	r25, r18
 1a8:	9a 95       	dec	r25
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1ac:	97 98       	cbi	0x12, 7	; 18
 1ae:	92 2f       	mov	r25, r18
 1b0:	9a 95       	dec	r25
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 1b4:	97 9a       	sbi	0x12, 7	; 18
 1b6:	92 2f       	mov	r25, r18
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 1bc:	93 b3       	in	r25, 0x13	; 19
 1be:	92 2f       	mov	r25, r18
 1c0:	9a 95       	dec	r25
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1c4:	97 98       	cbi	0x12, 7	; 18
 1c6:	92 2f       	mov	r25, r18
 1c8:	9a 95       	dec	r25
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 1cc:	87 fd       	sbrc	r24, 7
 1ce:	e4 cf       	rjmp	.-56     	; 0x198 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 1d0:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 1d2:	84 b3       	in	r24, 0x14	; 20
 1d4:	8f 60       	ori	r24, 0x0F	; 15
 1d6:	84 bb       	out	0x14, r24	; 20

}
 1d8:	08 95       	ret

000001da <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 1da:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 1dc:	66 23       	and	r22, r22
 1de:	11 f4       	brne	.+4      	; 0x1e4 <LCDByte+0xa>
	CLEAR_RS();
 1e0:	96 98       	cbi	0x12, 6	; 18
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <LCDByte+0xc>
else
	SET_RS();
 1e4:	96 9a       	sbi	0x12, 6	; 18
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	82 2f       	mov	r24, r18
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 1ee:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1f0:	85 b3       	in	r24, 0x15	; 21
 1f2:	93 2f       	mov	r25, r19
 1f4:	92 95       	swap	r25
 1f6:	9f 70       	andi	r25, 0x0F	; 15
 1f8:	80 7f       	andi	r24, 0xF0	; 240
 1fa:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1fc:	95 bb       	out	0x15, r25	; 21
 1fe:	82 2f       	mov	r24, r18
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 204:	97 98       	cbi	0x12, 7	; 18
 206:	82 2f       	mov	r24, r18
 208:	8a 95       	dec	r24
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 20c:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 20e:	85 b3       	in	r24, 0x15	; 21
 210:	3f 70       	andi	r19, 0x0F	; 15
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 216:	85 bb       	out	0x15, r24	; 21
 218:	82 2f       	mov	r24, r18
 21a:	8a 95       	dec	r24
 21c:	f1 f7       	brne	.-4      	; 0x21a <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 21e:	97 98       	cbi	0x12, 7	; 18
 220:	2a 95       	dec	r18
 222:	f1 f7       	brne	.-4      	; 0x220 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 224:	b0 df       	rcall	.-160    	; 0x186 <LCDBusyLoop>
}
 226:	08 95       	ret

00000228 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 228:	1f 93       	push	r17
 22a:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 22c:	8b e3       	ldi	r24, 0x3B	; 59
 22e:	9b e2       	ldi	r25, 0x2B	; 43
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 234:	84 b3       	in	r24, 0x14	; 20
 236:	8f 60       	ori	r24, 0x0F	; 15
 238:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 23a:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 23c:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 23e:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 240:	85 b3       	in	r24, 0x15	; 21
 242:	80 7f       	andi	r24, 0xF0	; 240
 244:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 246:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 248:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 24a:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	98 2f       	mov	r25, r24
 250:	9a 95       	dec	r25
 252:	f1 f7       	brne	.-4      	; 0x250 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 254:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 256:	a9 9a       	sbi	0x15, 1	; 21
 258:	98 2f       	mov	r25, r24
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 25e:	97 98       	cbi	0x12, 7	; 18
 260:	8a 95       	dec	r24
 262:	f1 f7       	brne	.-4      	; 0x260 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 264:	90 df       	rcall	.-224    	; 0x186 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 266:	81 2f       	mov	r24, r17
 268:	8c 60       	ori	r24, 0x0C	; 12
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	b6 df       	rcall	.-148    	; 0x1da <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	b3 df       	rcall	.-154    	; 0x1da <LCDByte>
}
 274:	1f 91       	pop	r17
 276:	08 95       	ret

00000278 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
 27e:	03 c0       	rjmp	.+6      	; 0x286 <LCDWriteString+0xe>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	ab df       	rcall	.-170    	; 0x1da <LCDByte>
	msg++;
 284:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 286:	88 81       	ld	r24, Y
 288:	88 23       	and	r24, r24
 28a:	d1 f7       	brne	.-12     	; 0x280 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	df 93       	push	r29
 29c:	cf 93       	push	r28
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <LCDWriteInt+0xe>
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <LCDWriteInt+0x10>
 2a2:	0f 92       	push	r0
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	9c 01       	movw	r18, r24
 2aa:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2ac:	fe 01       	movw	r30, r28
 2ae:	31 96       	adiw	r30, 0x01	; 1
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	df 01       	movw	r26, r30
 2b4:	1d 92       	st	X+, r1
 2b6:	8a 95       	dec	r24
 2b8:	e9 f7       	brne	.-6      	; 0x2b4 <LCDWriteInt+0x22>
 2ba:	fe 01       	movw	r30, r28
 2bc:	35 96       	adiw	r30, 0x05	; 5
 2be:	0b c0       	rjmp	.+22     	; 0x2d6 <LCDWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 2c0:	c9 01       	movw	r24, r18
 2c2:	6a e0       	ldi	r22, 0x0A	; 10
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	61 d0       	rcall	.+194    	; 0x38a <__divmodhi4>
 2c8:	80 83       	st	Z, r24
	val=val/10;
 2ca:	c9 01       	movw	r24, r18
 2cc:	6a e0       	ldi	r22, 0x0A	; 10
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	5c d0       	rcall	.+184    	; 0x38a <__divmodhi4>
 2d2:	9b 01       	movw	r18, r22
 2d4:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 2d6:	21 15       	cp	r18, r1
 2d8:	31 05       	cpc	r19, r1
 2da:	91 f7       	brne	.-28     	; 0x2c0 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2dc:	bf ef       	ldi	r27, 0xFF	; 255
 2de:	0f 3f       	cpi	r16, 0xFF	; 255
 2e0:	1b 07       	cpc	r17, r27
 2e2:	79 f4       	brne	.+30     	; 0x302 <LCDWriteInt+0x70>
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 2e8:	ae 01       	movw	r20, r28
 2ea:	4f 5f       	subi	r20, 0xFF	; 255
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <LCDWriteInt+0x62>
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	fa 01       	movw	r30, r20
 2f6:	e2 0f       	add	r30, r18
 2f8:	f3 1f       	adc	r31, r19
 2fa:	80 81       	ld	r24, Z
 2fc:	88 23       	and	r24, r24
 2fe:	c1 f3       	breq	.-16     	; 0x2f0 <LCDWriteInt+0x5e>
 300:	04 c0       	rjmp	.+8      	; 0x30a <LCDWriteInt+0x78>
	else
		j=5-field_length;
 302:	25 e0       	ldi	r18, 0x05	; 5
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	20 1b       	sub	r18, r16
 308:	31 0b       	sbc	r19, r17
 30a:	7e 01       	movw	r14, r28
 30c:	08 94       	sec
 30e:	e1 1c       	adc	r14, r1
 310:	f1 1c       	adc	r15, r1
 312:	e2 0e       	add	r14, r18
 314:	f3 1e       	adc	r15, r19
 316:	89 01       	movw	r16, r18
 318:	08 c0       	rjmp	.+16     	; 0x32a <LCDWriteInt+0x98>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 31a:	f7 01       	movw	r30, r14
 31c:	81 91       	ld	r24, Z+
 31e:	7f 01       	movw	r14, r30
 320:	80 5d       	subi	r24, 0xD0	; 208
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	5a df       	rcall	.-332    	; 0x1da <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 326:	0f 5f       	subi	r16, 0xFF	; 255
 328:	1f 4f       	sbci	r17, 0xFF	; 255
 32a:	05 30       	cpi	r16, 0x05	; 5
 32c:	11 05       	cpc	r17, r1
 32e:	ac f3       	brlt	.-22     	; 0x31a <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	cf 91       	pop	r28
 33c:	df 91       	pop	r29
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	08 95       	ret

00000348 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 348:	88 32       	cpi	r24, 0x28	; 40
 34a:	28 f4       	brcc	.+10     	; 0x356 <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 34c:	61 11       	cpse	r22, r1
 34e:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 350:	80 68       	ori	r24, 0x80	; 128
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	42 df       	rcall	.-380    	; 0x1da <LCDByte>
 356:	08 95       	ret

00000358 <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate

   UBRRL = ubrr_value;
 358:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
 35a:	90 bd       	out	0x20, r25	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
 35c:	86 e8       	ldi	r24, 0x86	; 134
 35e:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
 360:	88 ed       	ldi	r24, 0xD8	; 216
 362:	8a b9       	out	0x0a, r24	; 10


}
 364:	08 95       	ret

00000366 <USARTReadChar>:
//available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
 366:	5f 9b       	sbis	0x0b, 7	; 11
 368:	fe cf       	rjmp	.-4      	; 0x366 <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 36a:	8c b1       	in	r24, 0x0c	; 12
}
 36c:	08 95       	ret

0000036e <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 36e:	5d 9b       	sbis	0x0b, 5	; 11
 370:	fe cf       	rjmp	.-4      	; 0x36e <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 372:	8c b9       	out	0x0c, r24	; 12
}
 374:	08 95       	ret

00000376 <write>:
void write(char data[])
{
 376:	fc 01       	movw	r30, r24
 378:	04 c0       	rjmp	.+8      	; 0x382 <write+0xc>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 37a:	5d 9b       	sbis	0x0b, 5	; 11
 37c:	fe cf       	rjmp	.-4      	; 0x37a <write+0x4>
{
	//USARTWriteChar('#');
	//USARTWriteChar(6);
	//USARTWriteChar(1);

	while(*data) USARTWriteChar(*data++);
 37e:	31 96       	adiw	r30, 0x01	; 1
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 380:	8c b9       	out	0x0c, r24	; 12
{
	//USARTWriteChar('#');
	//USARTWriteChar(6);
	//USARTWriteChar(1);

	while(*data) USARTWriteChar(*data++);
 382:	80 81       	ld	r24, Z
 384:	88 23       	and	r24, r24
 386:	c9 f7       	brne	.-14     	; 0x37a <write+0x4>
}
 388:	08 95       	ret

0000038a <__divmodhi4>:
 38a:	97 fb       	bst	r25, 7
 38c:	09 2e       	mov	r0, r25
 38e:	07 26       	eor	r0, r23
 390:	0a d0       	rcall	.+20     	; 0x3a6 <__divmodhi4_neg1>
 392:	77 fd       	sbrc	r23, 7
 394:	04 d0       	rcall	.+8      	; 0x39e <__divmodhi4_neg2>
 396:	0c d0       	rcall	.+24     	; 0x3b0 <__udivmodhi4>
 398:	06 d0       	rcall	.+12     	; 0x3a6 <__divmodhi4_neg1>
 39a:	00 20       	and	r0, r0
 39c:	1a f4       	brpl	.+6      	; 0x3a4 <__divmodhi4_exit>

0000039e <__divmodhi4_neg2>:
 39e:	70 95       	com	r23
 3a0:	61 95       	neg	r22
 3a2:	7f 4f       	sbci	r23, 0xFF	; 255

000003a4 <__divmodhi4_exit>:
 3a4:	08 95       	ret

000003a6 <__divmodhi4_neg1>:
 3a6:	f6 f7       	brtc	.-4      	; 0x3a4 <__divmodhi4_exit>
 3a8:	90 95       	com	r25
 3aa:	81 95       	neg	r24
 3ac:	9f 4f       	sbci	r25, 0xFF	; 255
 3ae:	08 95       	ret

000003b0 <__udivmodhi4>:
 3b0:	aa 1b       	sub	r26, r26
 3b2:	bb 1b       	sub	r27, r27
 3b4:	51 e1       	ldi	r21, 0x11	; 17
 3b6:	07 c0       	rjmp	.+14     	; 0x3c6 <__udivmodhi4_ep>

000003b8 <__udivmodhi4_loop>:
 3b8:	aa 1f       	adc	r26, r26
 3ba:	bb 1f       	adc	r27, r27
 3bc:	a6 17       	cp	r26, r22
 3be:	b7 07       	cpc	r27, r23
 3c0:	10 f0       	brcs	.+4      	; 0x3c6 <__udivmodhi4_ep>
 3c2:	a6 1b       	sub	r26, r22
 3c4:	b7 0b       	sbc	r27, r23

000003c6 <__udivmodhi4_ep>:
 3c6:	88 1f       	adc	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	5a 95       	dec	r21
 3cc:	a9 f7       	brne	.-22     	; 0x3b8 <__udivmodhi4_loop>
 3ce:	80 95       	com	r24
 3d0:	90 95       	com	r25
 3d2:	bc 01       	movw	r22, r24
 3d4:	cd 01       	movw	r24, r26
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
